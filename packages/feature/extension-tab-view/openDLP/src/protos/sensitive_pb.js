// source: sensitive.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.InputStringType', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.MaskConfig', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.HashMethod', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.MaskConfig.MethodCase', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.PredefinedSensitiveType', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.DocType', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.Status', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.StatusCode', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.StringMaskRequest', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.StringMaskResponse', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse', null, global);
goog.exportSymbol('proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.repeatedFields_, null);
};
goog.inherits(proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.displayName = 'proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.repeatedFields_, null);
};
goog.inherits(proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.displayName = 'proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.displayName = 'proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.repeatedFields_, null);
};
goog.inherits(proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.displayName = 'proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.displayName = 'proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.repeatedFields_, null);
};
goog.inherits(proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.displayName = 'proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.repeatedFields_, null);
};
goog.inherits(proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.displayName = 'proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.hitszids.wf.opendlp.api.v1.MaskConfig.oneofGroups_);
};
goog.inherits(proto.hitszids.wf.opendlp.api.v1.MaskConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hitszids.wf.opendlp.api.v1.MaskConfig.displayName = 'proto.hitszids.wf.opendlp.api.v1.MaskConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.displayName = 'proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace.displayName = 'proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.displayName = 'proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse.displayName = 'proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.repeatedFields_, null);
};
goog.inherits(proto.hitszids.wf.opendlp.api.v1.StringMaskRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.displayName = 'proto.hitszids.wf.opendlp.api.v1.StringMaskRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hitszids.wf.opendlp.api.v1.StringMaskResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hitszids.wf.opendlp.api.v1.StringMaskResponse.displayName = 'proto.hitszids.wf.opendlp.api.v1.StringMaskResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hitszids.wf.opendlp.api.v1.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hitszids.wf.opendlp.api.v1.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hitszids.wf.opendlp.api.v1.Status.displayName = 'proto.hitszids.wf.opendlp.api.v1.Status';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    toAnalyzeString: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stringType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    entitiesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    notUseNlp: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    userDefineRuleYamlString: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest;
  return proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToAnalyzeString(value);
      break;
    case 2:
      var value = /** @type {!proto.hitszids.wf.opendlp.api.v1.InputStringType} */ (reader.readEnum());
      msg.setStringType(value);
      break;
    case 3:
      var values = /** @type {!Array<!proto.hitszids.wf.opendlp.api.v1.PredefinedSensitiveType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addEntities(values[i]);
      }
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotUseNlp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserDefineRuleYamlString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToAnalyzeString();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStringType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getNotUseNlp();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getUserDefineRuleYamlString();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string to_analyze_string = 1;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.prototype.getToAnalyzeString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.prototype.setToAnalyzeString = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional InputStringType string_type = 2;
 * @return {!proto.hitszids.wf.opendlp.api.v1.InputStringType}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.prototype.getStringType = function() {
  return /** @type {!proto.hitszids.wf.opendlp.api.v1.InputStringType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.hitszids.wf.opendlp.api.v1.InputStringType} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.prototype.setStringType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated PredefinedSensitiveType entities = 3;
 * @return {!Array<!proto.hitszids.wf.opendlp.api.v1.PredefinedSensitiveType>}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.prototype.getEntitiesList = function() {
  return /** @type {!Array<!proto.hitszids.wf.opendlp.api.v1.PredefinedSensitiveType>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<!proto.hitszids.wf.opendlp.api.v1.PredefinedSensitiveType>} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.prototype.setEntitiesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.hitszids.wf.opendlp.api.v1.PredefinedSensitiveType} value
 * @param {number=} opt_index
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.prototype.addEntities = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};


/**
 * optional bool not_use_nlp = 4;
 * @return {boolean}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.prototype.getNotUseNlp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.prototype.setNotUseNlp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string user_define_rule_yaml_string = 5;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.prototype.getUserDefineRuleYamlString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeRequest.prototype.setUserDefineRuleYamlString = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.hitszids.wf.opendlp.api.v1.Status.toObject(includeInstance, f),
    resultList: jspb.Message.toObjectList(msg.getResultList(),
    proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse;
  return proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hitszids.wf.opendlp.api.v1.Status;
      reader.readMessage(value,proto.hitszids.wf.opendlp.api.v1.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult;
      reader.readMessage(value,proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.deserializeBinaryFromReader);
      msg.addResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hitszids.wf.opendlp.api.v1.Status.serializeBinaryToWriter
    );
  }
  f = message.getResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status status = 1;
 * @return {?proto.hitszids.wf.opendlp.api.v1.Status}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.prototype.getStatus = function() {
  return /** @type{?proto.hitszids.wf.opendlp.api.v1.Status} */ (
    jspb.Message.getWrapperField(this, proto.hitszids.wf.opendlp.api.v1.Status, 1));
};


/**
 * @param {?proto.hitszids.wf.opendlp.api.v1.Status|undefined} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse} returns this
*/
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated StringSensitiveAnalyzeResult result = 2;
 * @return {!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.prototype.getResultList = function() {
  return /** @type{!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult, 2));
};


/**
 * @param {!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse} returns this
*/
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.prototype.setResultList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.prototype.addResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResponse.prototype.clearResultList = function() {
  return this.setResultList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.prototype.toObject = function(opt_includeInstance) {
  return proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    sensitiveType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    key: jspb.Message.getFieldWithDefault(msg, 2, ""),
    start: jspb.Message.getFieldWithDefault(msg, 3, 0),
    end: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult;
  return proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSensitiveType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStart(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSensitiveType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStart();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEnd();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string sensitive_type = 1;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.prototype.getSensitiveType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.prototype.setSensitiveType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 start = 3;
 * @return {number}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 end = 4;
 * @return {number}
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.prototype.setEnd = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uri: jspb.Message.getFieldWithDefault(msg, 1, ""),
    docType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    queryParams: jspb.Message.getFieldWithDefault(msg, 4, ""),
    restParams: jspb.Message.getFieldWithDefault(msg, 5, ""),
    requestBody: jspb.Message.getFieldWithDefault(msg, 6, ""),
    responseBody: jspb.Message.getFieldWithDefault(msg, 7, ""),
    entitiesList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    notUseNlp: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    userDefineRuleYamlString: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest;
  return proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 2:
      var value = /** @type {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.DocType} */ (reader.readEnum());
      msg.setDocType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueryParams(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRestParams(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestBody(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseBody(value);
      break;
    case 8:
      var values = /** @type {!Array<!proto.hitszids.wf.opendlp.api.v1.PredefinedSensitiveType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addEntities(values[i]);
      }
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotUseNlp(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserDefineRuleYamlString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDocType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getQueryParams();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRestParams();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRequestBody();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getResponseBody();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      8,
      f
    );
  }
  f = message.getNotUseNlp();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getUserDefineRuleYamlString();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.DocType = {
  DEFAULT: 0,
  EOAPI: 1
};

/**
 * optional string uri = 1;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.setUri = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DocType doc_type = 2;
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.DocType}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.getDocType = function() {
  return /** @type {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.DocType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.DocType} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.setDocType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string query_params = 4;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.getQueryParams = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.setQueryParams = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string rest_params = 5;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.getRestParams = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.setRestParams = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string request_body = 6;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.getRequestBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.setRequestBody = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string response_body = 7;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.getResponseBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.setResponseBody = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated PredefinedSensitiveType entities = 8;
 * @return {!Array<!proto.hitszids.wf.opendlp.api.v1.PredefinedSensitiveType>}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.getEntitiesList = function() {
  return /** @type {!Array<!proto.hitszids.wf.opendlp.api.v1.PredefinedSensitiveType>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<!proto.hitszids.wf.opendlp.api.v1.PredefinedSensitiveType>} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.setEntitiesList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!proto.hitszids.wf.opendlp.api.v1.PredefinedSensitiveType} value
 * @param {number=} opt_index
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.addEntities = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};


/**
 * optional bool not_use_nlp = 9;
 * @return {boolean}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.getNotUseNlp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.setNotUseNlp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string user_define_rule_yaml_string = 10;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.getUserDefineRuleYamlString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanRequest.prototype.setUserDefineRuleYamlString = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.hitszids.wf.opendlp.api.v1.Status.toObject(includeInstance, f),
    result: (f = msg.getResult()) && proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse;
  return proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hitszids.wf.opendlp.api.v1.Status;
      reader.readMessage(value,proto.hitszids.wf.opendlp.api.v1.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult;
      reader.readMessage(value,proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hitszids.wf.opendlp.api.v1.Status.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status status = 1;
 * @return {?proto.hitszids.wf.opendlp.api.v1.Status}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.prototype.getStatus = function() {
  return /** @type{?proto.hitszids.wf.opendlp.api.v1.Status} */ (
    jspb.Message.getWrapperField(this, proto.hitszids.wf.opendlp.api.v1.Status, 1));
};


/**
 * @param {?proto.hitszids.wf.opendlp.api.v1.Status|undefined} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse} returns this
*/
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SensitiveAPIScanResult result = 2;
 * @return {?proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.prototype.getResult = function() {
  return /** @type{?proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult} */ (
    jspb.Message.getWrapperField(this, proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult, 2));
};


/**
 * @param {?proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult|undefined} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse} returns this
*/
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.prototype.setResult = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.repeatedFields_ = [1,2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.toObject = function(opt_includeInstance) {
  return proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    uriList: jspb.Message.toObjectList(msg.getUriList(),
    proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.toObject, includeInstance),
    descriptionList: jspb.Message.toObjectList(msg.getDescriptionList(),
    proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.toObject, includeInstance),
    queryParamsList: jspb.Message.toObjectList(msg.getQueryParamsList(),
    proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.toObject, includeInstance),
    restParamsList: jspb.Message.toObjectList(msg.getRestParamsList(),
    proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.toObject, includeInstance),
    requestBodyList: jspb.Message.toObjectList(msg.getRequestBodyList(),
    proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.toObject, includeInstance),
    responseBodyList: jspb.Message.toObjectList(msg.getResponseBodyList(),
    proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult;
  return proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult;
      reader.readMessage(value,proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.deserializeBinaryFromReader);
      msg.addUri(value);
      break;
    case 2:
      var value = new proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult;
      reader.readMessage(value,proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.deserializeBinaryFromReader);
      msg.addDescription(value);
      break;
    case 3:
      var value = new proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult;
      reader.readMessage(value,proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.deserializeBinaryFromReader);
      msg.addQueryParams(value);
      break;
    case 4:
      var value = new proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult;
      reader.readMessage(value,proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.deserializeBinaryFromReader);
      msg.addRestParams(value);
      break;
    case 5:
      var value = new proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult;
      reader.readMessage(value,proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.deserializeBinaryFromReader);
      msg.addRequestBody(value);
      break;
    case 6:
      var value = new proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult;
      reader.readMessage(value,proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.deserializeBinaryFromReader);
      msg.addResponseBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUriList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.serializeBinaryToWriter
    );
  }
  f = message.getDescriptionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.serializeBinaryToWriter
    );
  }
  f = message.getQueryParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.serializeBinaryToWriter
    );
  }
  f = message.getRestParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.serializeBinaryToWriter
    );
  }
  f = message.getRequestBodyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.serializeBinaryToWriter
    );
  }
  f = message.getResponseBodyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StringSensitiveAnalyzeResult uri = 1;
 * @return {!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.getUriList = function() {
  return /** @type{!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult, 1));
};


/**
 * @param {!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult} returns this
*/
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.setUriList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.addUri = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.clearUriList = function() {
  return this.setUriList([]);
};


/**
 * repeated StringSensitiveAnalyzeResult description = 2;
 * @return {!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.getDescriptionList = function() {
  return /** @type{!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult, 2));
};


/**
 * @param {!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult} returns this
*/
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.setDescriptionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.addDescription = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.clearDescriptionList = function() {
  return this.setDescriptionList([]);
};


/**
 * repeated StringSensitiveAnalyzeResult query_params = 3;
 * @return {!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.getQueryParamsList = function() {
  return /** @type{!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult, 3));
};


/**
 * @param {!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult} returns this
*/
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.setQueryParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.addQueryParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.clearQueryParamsList = function() {
  return this.setQueryParamsList([]);
};


/**
 * repeated StringSensitiveAnalyzeResult rest_params = 4;
 * @return {!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.getRestParamsList = function() {
  return /** @type{!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult, 4));
};


/**
 * @param {!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult} returns this
*/
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.setRestParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.addRestParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.clearRestParamsList = function() {
  return this.setRestParamsList([]);
};


/**
 * repeated StringSensitiveAnalyzeResult request_body = 5;
 * @return {!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.getRequestBodyList = function() {
  return /** @type{!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult, 5));
};


/**
 * @param {!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult} returns this
*/
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.setRequestBodyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.addRequestBody = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.clearRequestBodyList = function() {
  return this.setRequestBodyList([]);
};


/**
 * repeated StringSensitiveAnalyzeResult response_body = 6;
 * @return {!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.getResponseBodyList = function() {
  return /** @type{!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult, 6));
};


/**
 * @param {!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult} returns this
*/
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.setResponseBodyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult}
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.addResponseBody = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult} returns this
 */
proto.hitszids.wf.opendlp.api.v1.SensitiveAPIScanResult.prototype.clearResponseBodyList = function() {
  return this.setResponseBodyList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    toMaskString: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sensitiveAnalyzeResultsList: jspb.Message.toObjectList(msg.getSensitiveAnalyzeResultsList(),
    proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.toObject, includeInstance),
    maskConfigMap: (f = msg.getMaskConfigMap()) ? f.toObject(includeInstance, proto.hitszids.wf.opendlp.api.v1.MaskConfig.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest;
  return proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToMaskString(value);
      break;
    case 2:
      var value = new proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult;
      reader.readMessage(value,proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.deserializeBinaryFromReader);
      msg.addSensitiveAnalyzeResults(value);
      break;
    case 3:
      var value = msg.getMaskConfigMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.hitszids.wf.opendlp.api.v1.MaskConfig.deserializeBinaryFromReader, "", new proto.hitszids.wf.opendlp.api.v1.MaskConfig());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToMaskString();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSensitiveAnalyzeResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult.serializeBinaryToWriter
    );
  }
  f = message.getMaskConfigMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.hitszids.wf.opendlp.api.v1.MaskConfig.serializeBinaryToWriter);
  }
};


/**
 * optional string to_mask_string = 1;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.prototype.getToMaskString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.prototype.setToMaskString = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated StringSensitiveAnalyzeResult sensitive_analyze_results = 2;
 * @return {!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.prototype.getSensitiveAnalyzeResultsList = function() {
  return /** @type{!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult, 2));
};


/**
 * @param {!Array<!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult>} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest} returns this
*/
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.prototype.setSensitiveAnalyzeResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.prototype.addSensitiveAnalyzeResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.hitszids.wf.opendlp.api.v1.StringSensitiveAnalyzeResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.prototype.clearSensitiveAnalyzeResultsList = function() {
  return this.setSensitiveAnalyzeResultsList([]);
};


/**
 * map<string, MaskConfig> mask_config = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.hitszids.wf.opendlp.api.v1.MaskConfig>}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.prototype.getMaskConfigMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.hitszids.wf.opendlp.api.v1.MaskConfig>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.hitszids.wf.opendlp.api.v1.MaskConfig));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultRequest.prototype.clearMaskConfigMap = function() {
  this.getMaskConfigMap().clear();
  return this;};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.MethodCase = {
  METHOD_NOT_SET: 0,
  REPLACE: 1,
  COVER: 2,
  HASH: 3,
  REDACT: 4
};

/**
 * @return {proto.hitszids.wf.opendlp.api.v1.MaskConfig.MethodCase}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.getMethodCase = function() {
  return /** @type {proto.hitszids.wf.opendlp.api.v1.MaskConfig.MethodCase} */(jspb.Message.computeOneofCase(this, proto.hitszids.wf.opendlp.api.v1.MaskConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.hitszids.wf.opendlp.api.v1.MaskConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hitszids.wf.opendlp.api.v1.MaskConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    replace: (f = msg.getReplace()) && proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace.toObject(includeInstance, f),
    cover: (f = msg.getCover()) && proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.toObject(includeInstance, f),
    hash: (f = msg.getHash()) && proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.toObject(includeInstance, f),
    redact: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hitszids.wf.opendlp.api.v1.MaskConfig;
  return proto.hitszids.wf.opendlp.api.v1.MaskConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hitszids.wf.opendlp.api.v1.MaskConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace;
      reader.readMessage(value,proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace.deserializeBinaryFromReader);
      msg.setReplace(value);
      break;
    case 2:
      var value = new proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover;
      reader.readMessage(value,proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.deserializeBinaryFromReader);
      msg.setCover(value);
      break;
    case 3:
      var value = new proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash;
      reader.readMessage(value,proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.deserializeBinaryFromReader);
      msg.setHash(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRedact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hitszids.wf.opendlp.api.v1.MaskConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hitszids.wf.opendlp.api.v1.MaskConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplace();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace.serializeBinaryToWriter
    );
  }
  f = message.getCover();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.serializeBinaryToWriter
    );
  }
  f = message.getHash();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.prototype.toObject = function(opt_includeInstance) {
  return proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.toObject = function(includeInstance, msg) {
  var f, obj = {
    coverChar: jspb.Message.getFieldWithDefault(msg, 1, ""),
    offsetStart: jspb.Message.getFieldWithDefault(msg, 2, 0),
    offsetEnd: jspb.Message.getFieldWithDefault(msg, 3, 0),
    coverLength: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fromBack: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    ignoreCharSet: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover;
  return proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoverChar(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffsetStart(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffsetEnd(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoverLength(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFromBack(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIgnoreCharSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoverChar();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOffsetStart();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOffsetEnd();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCoverLength();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFromBack();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIgnoreCharSet();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string cover_char = 1;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.prototype.getCoverChar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover} returns this
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.prototype.setCoverChar = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 offset_start = 2;
 * @return {number}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.prototype.getOffsetStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover} returns this
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.prototype.setOffsetStart = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 offset_end = 3;
 * @return {number}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.prototype.getOffsetEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover} returns this
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.prototype.setOffsetEnd = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 cover_length = 4;
 * @return {number}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.prototype.getCoverLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover} returns this
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.prototype.setCoverLength = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool from_back = 5;
 * @return {boolean}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.prototype.getFromBack = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover} returns this
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.prototype.setFromBack = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string ignore_char_set = 6;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.prototype.getIgnoreCharSet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover} returns this
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover.prototype.setIgnoreCharSet = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace.prototype.toObject = function(opt_includeInstance) {
  return proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace.toObject = function(includeInstance, msg) {
  var f, obj = {
    newValue: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace;
  return proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string new_value = 1;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace.prototype.getNewValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace} returns this
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace.prototype.setNewValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.prototype.toObject = function(opt_includeInstance) {
  return proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash;
  return proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.HashMethod} */ (reader.readEnum());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.HashMethod = {
  SHA256: 0,
  SHA512: 1,
  MD5: 2
};

/**
 * optional HashMethod value = 1;
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.HashMethod}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.prototype.getValue = function() {
  return /** @type {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.HashMethod} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.HashMethod} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash} returns this
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash.prototype.setValue = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Replace replace = 1;
 * @return {?proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.getReplace = function() {
  return /** @type{?proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace} */ (
    jspb.Message.getWrapperField(this, proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace, 1));
};


/**
 * @param {?proto.hitszids.wf.opendlp.api.v1.MaskConfig.Replace|undefined} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig} returns this
*/
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.setReplace = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.hitszids.wf.opendlp.api.v1.MaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig} returns this
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.clearReplace = function() {
  return this.setReplace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.hasReplace = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Cover cover = 2;
 * @return {?proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.getCover = function() {
  return /** @type{?proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover} */ (
    jspb.Message.getWrapperField(this, proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover, 2));
};


/**
 * @param {?proto.hitszids.wf.opendlp.api.v1.MaskConfig.Cover|undefined} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig} returns this
*/
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.setCover = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.hitszids.wf.opendlp.api.v1.MaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig} returns this
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.clearCover = function() {
  return this.setCover(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.hasCover = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Hash hash = 3;
 * @return {?proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.getHash = function() {
  return /** @type{?proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash} */ (
    jspb.Message.getWrapperField(this, proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash, 3));
};


/**
 * @param {?proto.hitszids.wf.opendlp.api.v1.MaskConfig.Hash|undefined} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig} returns this
*/
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.setHash = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.hitszids.wf.opendlp.api.v1.MaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig} returns this
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.clearHash = function() {
  return this.setHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.hasHash = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool redact = 4;
 * @return {boolean}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.getRedact = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig} returns this
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.setRedact = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.hitszids.wf.opendlp.api.v1.MaskConfig.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hitszids.wf.opendlp.api.v1.MaskConfig} returns this
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.clearRedact = function() {
  return jspb.Message.setOneofField(this, 4, proto.hitszids.wf.opendlp.api.v1.MaskConfig.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hitszids.wf.opendlp.api.v1.MaskConfig.prototype.hasRedact = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.hitszids.wf.opendlp.api.v1.Status.toObject(includeInstance, f),
    result: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse;
  return proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hitszids.wf.opendlp.api.v1.Status;
      reader.readMessage(value,proto.hitszids.wf.opendlp.api.v1.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hitszids.wf.opendlp.api.v1.Status.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Status status = 1;
 * @return {?proto.hitszids.wf.opendlp.api.v1.Status}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse.prototype.getStatus = function() {
  return /** @type{?proto.hitszids.wf.opendlp.api.v1.Status} */ (
    jspb.Message.getWrapperField(this, proto.hitszids.wf.opendlp.api.v1.Status, 1));
};


/**
 * @param {?proto.hitszids.wf.opendlp.api.v1.Status|undefined} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse} returns this
*/
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string result = 2;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskWithAnalyzeResultResponse.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringMaskRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    toMaskString: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stringType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    entitiesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    notUseNlp: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    userDefineRuleYamlString: jspb.Message.getFieldWithDefault(msg, 5, ""),
    maskConfigMap: (f = msg.getMaskConfigMap()) ? f.toObject(includeInstance, proto.hitszids.wf.opendlp.api.v1.MaskConfig.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskRequest}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hitszids.wf.opendlp.api.v1.StringMaskRequest;
  return proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringMaskRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskRequest}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToMaskString(value);
      break;
    case 2:
      var value = /** @type {!proto.hitszids.wf.opendlp.api.v1.InputStringType} */ (reader.readEnum());
      msg.setStringType(value);
      break;
    case 3:
      var values = /** @type {!Array<!proto.hitszids.wf.opendlp.api.v1.PredefinedSensitiveType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addEntities(values[i]);
      }
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotUseNlp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserDefineRuleYamlString(value);
      break;
    case 6:
      var value = msg.getMaskConfigMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.hitszids.wf.opendlp.api.v1.MaskConfig.deserializeBinaryFromReader, "", new proto.hitszids.wf.opendlp.api.v1.MaskConfig());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringMaskRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToMaskString();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStringType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getNotUseNlp();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getUserDefineRuleYamlString();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMaskConfigMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.hitszids.wf.opendlp.api.v1.MaskConfig.serializeBinaryToWriter);
  }
};


/**
 * optional string to_mask_string = 1;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.prototype.getToMaskString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.prototype.setToMaskString = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional InputStringType string_type = 2;
 * @return {!proto.hitszids.wf.opendlp.api.v1.InputStringType}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.prototype.getStringType = function() {
  return /** @type {!proto.hitszids.wf.opendlp.api.v1.InputStringType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.hitszids.wf.opendlp.api.v1.InputStringType} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.prototype.setStringType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated PredefinedSensitiveType entities = 3;
 * @return {!Array<!proto.hitszids.wf.opendlp.api.v1.PredefinedSensitiveType>}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.prototype.getEntitiesList = function() {
  return /** @type {!Array<!proto.hitszids.wf.opendlp.api.v1.PredefinedSensitiveType>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<!proto.hitszids.wf.opendlp.api.v1.PredefinedSensitiveType>} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.prototype.setEntitiesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.hitszids.wf.opendlp.api.v1.PredefinedSensitiveType} value
 * @param {number=} opt_index
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.prototype.addEntities = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};


/**
 * optional bool not_use_nlp = 4;
 * @return {boolean}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.prototype.getNotUseNlp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.prototype.setNotUseNlp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string user_define_rule_yaml_string = 5;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.prototype.getUserDefineRuleYamlString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.prototype.setUserDefineRuleYamlString = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * map<string, MaskConfig> mask_config = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.hitszids.wf.opendlp.api.v1.MaskConfig>}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.prototype.getMaskConfigMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.hitszids.wf.opendlp.api.v1.MaskConfig>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.hitszids.wf.opendlp.api.v1.MaskConfig));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskRequest} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskRequest.prototype.clearMaskConfigMap = function() {
  this.getMaskConfigMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.hitszids.wf.opendlp.api.v1.StringMaskResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringMaskResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.hitszids.wf.opendlp.api.v1.Status.toObject(includeInstance, f),
    result: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskResponse}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hitszids.wf.opendlp.api.v1.StringMaskResponse;
  return proto.hitszids.wf.opendlp.api.v1.StringMaskResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringMaskResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskResponse}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hitszids.wf.opendlp.api.v1.Status;
      reader.readMessage(value,proto.hitszids.wf.opendlp.api.v1.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hitszids.wf.opendlp.api.v1.StringMaskResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hitszids.wf.opendlp.api.v1.StringMaskResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hitszids.wf.opendlp.api.v1.Status.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Status status = 1;
 * @return {?proto.hitszids.wf.opendlp.api.v1.Status}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskResponse.prototype.getStatus = function() {
  return /** @type{?proto.hitszids.wf.opendlp.api.v1.Status} */ (
    jspb.Message.getWrapperField(this, proto.hitszids.wf.opendlp.api.v1.Status, 1));
};


/**
 * @param {?proto.hitszids.wf.opendlp.api.v1.Status|undefined} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskResponse} returns this
*/
proto.hitszids.wf.opendlp.api.v1.StringMaskResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskResponse} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string result = 2;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.StringMaskResponse} returns this
 */
proto.hitszids.wf.opendlp.api.v1.StringMaskResponse.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hitszids.wf.opendlp.api.v1.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.hitszids.wf.opendlp.api.v1.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hitszids.wf.opendlp.api.v1.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msg: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hitszids.wf.opendlp.api.v1.Status}
 */
proto.hitszids.wf.opendlp.api.v1.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hitszids.wf.opendlp.api.v1.Status;
  return proto.hitszids.wf.opendlp.api.v1.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hitszids.wf.opendlp.api.v1.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hitszids.wf.opendlp.api.v1.Status}
 */
proto.hitszids.wf.opendlp.api.v1.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.hitszids.wf.opendlp.api.v1.StatusCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hitszids.wf.opendlp.api.v1.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hitszids.wf.opendlp.api.v1.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hitszids.wf.opendlp.api.v1.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hitszids.wf.opendlp.api.v1.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional StatusCode code = 1;
 * @return {!proto.hitszids.wf.opendlp.api.v1.StatusCode}
 */
proto.hitszids.wf.opendlp.api.v1.Status.prototype.getCode = function() {
  return /** @type {!proto.hitszids.wf.opendlp.api.v1.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.hitszids.wf.opendlp.api.v1.StatusCode} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.Status} returns this
 */
proto.hitszids.wf.opendlp.api.v1.Status.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.hitszids.wf.opendlp.api.v1.Status.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hitszids.wf.opendlp.api.v1.Status} returns this
 */
proto.hitszids.wf.opendlp.api.v1.Status.prototype.setMsg = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.hitszids.wf.opendlp.api.v1.PredefinedSensitiveType = {
  DEFAULT: 0,
  BANK_CARD: 1,
  DATE: 2,
  DOMAIN_NAME: 3,
  EMAIL: 4,
  ID_CARD: 5,
  IPV4: 6,
  IPV6: 7,
  LICENSE_PLATE: 8,
  MAC: 9,
  MOBILE_PHONE: 10,
  PASSPORT: 11,
  POSTCODE: 12,
  SOCIAL_CREDIT_CODE: 13,
  TELEPHONE: 14,
  PERSON: 15,
  COMPANY_NAME: 16,
  LOCATION: 17
};

/**
 * @enum {number}
 */
proto.hitszids.wf.opendlp.api.v1.InputStringType = {
  UNKNOWN: 0,
  JSON: 1,
  XML: 2,
  OTHER: 3
};

/**
 * @enum {number}
 */
proto.hitszids.wf.opendlp.api.v1.StatusCode = {
  OK: 0,
  PARAMETER_ERROR: 10000,
  FILE_READ_ERROR: 10001,
  JSON_FILE_PARSE_ERROR: 10002,
  STRING_SENSITIVE_ANALYZE_ERROR: 10003,
  SENSITIVE_API_SCAN_ERROR: 10004,
  STRING_MASK_ERROR: 10005,
  STRING_ANALYZE_MASK_ERROR: 10006
};

goog.object.extend(exports, proto.hitszids.wf.opendlp.api.v1);
